4.||Polymorphism||
There are two types of Polymorphism(many-forms):-
(i)Compile time polymorphism/Static Binding/Early binding:-
      a.Fuction Overloading
      b.Operator Overloading
      
(ii)Runtime Polymorphism/Dynamic Binding/Lazy Binding
        a.Function Overriding(using virtual function)
        
  
(i-a)Function Overloading:- When two functions have same name and different parameters we call them overloaded functions,
Note:- we distinguish them through parameters and not their return type i.e two function with same name and parameter will do ambiguous call irrespective of
their return type so compiler will show error immidiately.



#include<iostream>
using namespace std;


class Test
{
public:
	void fun(int a){cout<<"Integer is being called!"<<endl;}
	void fun(double a){cout<<"double is being called!"<<endl;}

	
};


int main(){
	Test obj;
	obj.fun(10);
	obj.fun(10.0);

return 0;
}

(i-b)Operator Overloading:-




#include<iostream>
#include<string>
using namespace std;


class Point{
	int x,y;
public:
	Point(int p=0,int q=0){  //this contructor can be used for default as well parameterised too
        x = p;
		y = q;
	}
    
  //return type,keyword, "operator that is being overloaded",(const,return type,(pass by reference)&variable);
	Point operator + (const Point &rhs){
		Point p;
		p.x = x + rhs.x;
		p.y = y + rhs.y;
		return p;
	}

	Point operator - (const Point &rhs){
		Point p;
		p.x = x - rhs.x;
		p.y = y - rhs.y;
		return p;
	}

	void print(){
		cout<<"x: "<<x<<endl<<"y: "<<y<<endl;
	}
};



int main(){
	Point p1(1,2),p2(3,4);
	Point p3 = p1 + p2;    //adding two objects which is made possible through operator overloading
    Point p4 = p3 - p1;
    p3.print();
    p4.print();
return 0;
}








