Constructors:-
1.Has same name as that of class,
2.Helps in object creation,
3.Automatically called when we create an object of the class,
4.No return type(like int,double etc),
5.If not given by user,compiler will create itself.


Types of constructors:-
3 types:
1.Default constructors:-  Called when object has no pre-assigned values,
2.Parameterised constructors :- Called when parameters(values) are given in object,
3.Copy constructors :- Called when one object is assigned(copied) to another.


Destructors:
1.This is a special member function(functions which has same name as class) with tilde(~) before the name.
2.Used to destruct the memory of object which was constructed by constructor.
3.Destructors get called automatically(implicit call),as constructor was.
4.We can call destructors explicitly but that is not a good practice.




#include<iostream>
using namespace std;

class Point{
	double x;
	double y;

public:
	Point(){

		cout<<"default constructor called!"<<endl;

		x = 0;
		y = 0;

	

		
	}

	Point(double X,double Y){
		
		cout<<"parameterised constructor called!"<<endl;

		x = X;
		y = Y;

	
		
	}
	
	Point(const Point &rhs){   //value is referenced i.e rhs is same as p1 consider it just a different name,here data type of rhs is Point because p1 is
	                           //of Point type(Point is user defined data type).



		cout<<"Copy constructor called!"<<endl;

		x = rhs.x;
		y = rhs.y;


		
	}
	
	//Destructor
	~Point(){
		cout<<"Destructor called"<<endl;
	}


	//getters
	double getX(){
		return x;
	}

	double getY(){
		return y;
	}



};
int main(){
	Point p1;  // calls default constructor
	cout<<p1.getX()<<endl;                                     //These methods through object through getter function access value of x and y.
	cout<<p1.getY()<<endl;

	

	Point p2(1.3,3.4);  //calls parameterised constructor

	cout<<p2.getX()<<endl;
	cout<<p2.getY()<<endl;   



	Point p3 = p1;   // calls copy constructor


	cout<<p3.getX()<<endl;
	cout<<p3.getY()<<endl;




return 0;
}
