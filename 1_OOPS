# OOPS
Intro:-
||classes|| :- 
1.Are user defined data type,
2.Blueprint from which objects are created
3.It has -attributes,functions(methods).


||objects|| :-

1.Created from class
2.each object can be unique
3.each can use the same methods defined in a class.

||Constructors|| :-
1.Has same name as that of class,
2.Helps in object creation,
3.Automatically called when we create an object of the class,
4.No return type(like int,double etc),
5.If not given by user,compiler will create itself.


Types of constructors:-
3 types:
1.Default constructors:-  Called when object has no pre-assigned values,
2.Parameterised constructors :- Called when parameters(values) are given in object,
3.Copy constructors :- Called when one object is assigned(copied) to another.


||Destructors||:-

1.This is a special member function(functions which has same name as class) with tilde(~) before the name.
2.Used to destruct the memory of object which was constructed by constructor.
3.Destructors get called automatically(implicit call),as constructor was.
4.We can call destructors explicitly but that is not a good practice.

||important topiThcs:- This pointer,Friend Function.||

This Pointer:-





||4 pillars of OOPS-  Encapsulation,Abstraction,Inheritance, and Polymorphism.||


1.||Encapsulation||

(i)The OOPS concept which talks about binding data and the function that manipulates those data,
(ii)Class is an example of encapsulation,if we have created some class and have data,member function then it is an example of encapsulation.

2.||Abstraction||
(i)Show only relevant information to 
(ii)Data abstraction and data hiding are two different things.



||This Pointer||

1.This pointer is used to hold address of current object using which we have called the current member function,
2.This pointer is const(as you cant change the address of the object through whicht the function has been called),
3.This pointer is passed as hidden argument in non-static member functions,
4.Compiler automatically changes all data member access with this pointer.

friend function,inheritance,polymorphism.

